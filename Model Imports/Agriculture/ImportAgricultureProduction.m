function AgricultureProduction = ImportAgricultureProduction(conn)
    % ImportAgricultureProduction
    % ===========================
    % Author: Nathan Owen
    % Last modified: 23/09/2019
    % Import all data required for running the NEV agriculture model. To be
    % called from within the ImportAgriculture.m script.
    % Inputs:
    % - conn: a database connection
    % Outputs:
    % - AgricultureProduction: a structure containing multiple fields.
    %   Firstly, the field Coefficients which itself is a strucuture
    %   containing coefficients for the top level, arable, grassland and
    %   livestock models. Secondly, the field Data_cells which contains the
    %   required data for the models for all 2km grid cells. Finally, the
    %   field Climate_cells which contains the required annual climate data
    %   (temperature and precipitation, 2020-2059) for the models for all 
    %   2km grid cells. 

    %% (1) Load data from database
    %  ===========================
    % (a) Coefficients for the top level, arable, grassland and livestock models
    % --------------------------------------------------------------------------
    % Note: models and coefficients from Carlo Fezzi
    % i. Top Level
    sqlquery = ['SELECT ', ...
                    'beta_toplevel AS toplevel ', ...
                'FROM nevo.betas_ag_toplevel'];
    setdbprefs('DataReturnFormat','numeric');
    dataReturn  = fetch(exec(conn,sqlquery));
    AgricultureProduction.Coefficients.TopLevel = dataReturn.Data;

    % ii. Arable (actually several crop models)
    sqlquery = ['SELECT ', ...
                    'beta_wheat AS wheat, ', ...
                    'beta_osr AS osr, ', ...
                    'beta_tbar AS tbar, ', ...
                    'beta_root AS root ', ...
                'FROM nevo.betas_ag_arable'];
    setdbprefs('DataReturnFormat','structure');
    dataReturn  = fetch(exec(conn,sqlquery));
    AgricultureProduction.Coefficients.Arable = dataReturn.Data;

    % iii. Grassland (actually several grassland models)
    sqlquery = ['SELECT ', ...
                    'beta_pgrass AS pgrass, ', ...
                    'beta_tgrass AS tgrass, ', ...
                    'beta_rgraz AS rgraz ', ...
                'FROM nevo.betas_ag_grass'];
    setdbprefs('DataReturnFormat','structure');
    dataReturn  = fetch(exec(conn,sqlquery));
    AgricultureProduction.Coefficients.Grass = dataReturn.Data;

    % iv. Livestock (actually several livestock models)
    sqlquery = ['SELECT ', ...
                    'beta_dairy AS dairy, ', ...
                    'beta_beef AS beef, ', ...
                    'beta_sheep AS sheep ', ...
                'FROM nevo.betas_ag_livestock'];
    setdbprefs('DataReturnFormat','structure');
    dataReturn  = fetch(exec(conn,sqlquery));
    AgricultureProduction.Coefficients.Livestock = dataReturn.Data;

    % (b) Grid cell data needed for the top level, arable, grassland and livestock models
    % -----------------------------------------------------------------------------------
    sqlquery = ['SELECT ', ...
                    'new2kid, ', ...
                    'const, ', ...
                    'avelev_cell, ', ...
                    'avelev200_cell, ', ...
                    'avslp_cell, ', ...
                    'sqavslp_cell, ', ...
                    'pca_fslpgrt6, ', ...
                    'pca_npoct10, ', ...
                    'pca_esa94, ', ...
                    'pca_ukgre12, ', ...
                    'pca_nvz09n, ', ...
                    'wales, ', ...
                    'scotland, ', ...
                    'island, ', ...
                    'dist300, ', ...
                    'sb_dist, ', ...
                    'sb_dist20, ', ...
                    'sb_dist40, ', ...
                    'sb_dist80, ', ...
                    'sb_dist120, ', ...
                    'ph, ', ...
                    'sqph, ', ...
                    'cuph, ', ...
                    'root_depth, ', ...
                    'pca_oc5, ', ...
                    'pca_oc6, ', ...
                    'pca_coarse, ', ...
                    'pca_med, ', ...
                    'pca_fine, ', ...
                    'pca_peat, ', ...
                    'pca_gravelly, ', ...
                    'pca_stony, ', ...
                    'pca_fragipan, ', ...
                    'pca_saline, ', ...
                    'pca_notex, ', ...
                    'adjsilt, ', ...
                    'adjclay, ', ...
                    'price_wheat, ', ...
                    'price_osr, ', ...
                    'price_wbar, ', ...
                    'price_sbar, ', ...
                    'price_pot, ', ...
                    'price_sb, ', ...
                    'price_pnb, ', ...
                    'price_milk, ', ...
                    'price_beef, ', ...
                    'price_sheep, ', ...
                    'price_fert, ', ...
                    'price_quota, ', ...
                    'trend_toplevel, ', ...
                    'trend_ar, ', ...
                    'trend_ls, ', ...
                    'bse, ', ...
                    'trend_bse, ', ...
                    'share_wbar, ', ...
                    'share_pot, ', ...
                    'yield_wheat, ', ...
                    'yield_osr, ', ...
                    'yield_wbar, ', ...
                    'yield_sbar, ', ...
                    'yield_pot, ', ...
                    'yield_sb ', ...
                'FROM nevo.nevo_variables ORDER BY new2kid'];
    setdbprefs('DataReturnFormat','table');
    dataReturn  = fetch(exec(conn,sqlquery));
    data_cells = dataReturn.Data;
    
    % (c) Load agricultural yield classes
    % ---------------------------------------------------
    sqlquery = ['WITH t1 AS (SELECT new2kid, alc, COUNT(DISTINCT onekmid) AS alc_onekmcells ',...
        ' FROM boundaries.onekmgrid_alc GROUP BY (new2kid, alc) ',...
        ' ), t2 AS ',...
        ' (SELECT new2kid, COUNT(DISTINCT onekmid) AS num_onekmcells ',...
        ' FROM boundaries.onekmgrid_alc GROUP BY new2kid ',...
        '	  )',...
        ' SELECT t1.new2kid, alc, alc_onekmcells::decimal/ num_onekmcells::decimal AS proportion ',...
        ' FROM t1 LEFT JOIN t2 ON t1.new2kid = t2.new2kid'];
    setdbprefs('DataReturnFormat','table');
    dataReturn  = fetch(exec(conn, sqlquery));
    alc         = dataReturn.Data;
    
    % Save 2km grid cell new2kid separately
    AgricultureProduction.new2kid = table2array(data_cells(:, 1));
    AgricultureProduction.alc     = alc;
    
    % Rest goes into AgricultureProduction.Data_cells table
    AgricultureProduction.Data_cells = data_cells(:, 2:end);
end