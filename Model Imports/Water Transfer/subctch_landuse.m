clear

%% (1) Set up
%  ==========
% (a) Connect to database
% -----------------------
server_flag = false;
conn = fcn_connect_to_database(server_flag);

% (b) Database calls
% ------------------
% Brett's subcatchment IDs and areas, in the order we want them in
% NB area must be in square kilometres!!! The transfer model expects this
sqlquery = ['SELECT ', ...
                'subctch_id, ', ...
                'area/1000000 AS area_km2 ', ...
            'FROM water.river_catchments ', ...
            'ORDER BY subctch_id'];
setdbprefs('DataReturnFormat', 'table');
dataReturn  = fetch(exec(conn, sqlquery));
subctch_info = dataReturn.Data;

% Intersection of 2km grid / Brett's subcatchments and proportion of cell 
% in subcatchment (key_grid_subctch)
sqlquery = ['SELECT ', ...
                'new2kid, ', ...
                'subctch_id, ', ...
                'proportion ', ...
            'FROM regions_keys.key_grid_wfd_subcatchments ', ...
            'ORDER BY new2kid, subctch_id'];
setdbprefs('DataReturnFormat', 'table');
dataReturn  = fetch(exec(conn, sqlquery));
key_grid_subctch = dataReturn.Data;

% (e) Path to save land use .mat files
% ------------------------------------
path_to_save = [water_transfer_data_folder,'Land Use\'];

%% (2) Get baseline land cover by running NEV agriculture model
%  ============================================================
% NB. ideally we would have run the agriculture model separately and saved
% output in a database table...

% (a) Path to model data
% ----------------------
SetDataPaths;

% (b) Model parameters
% --------------------
parameters = fcn_set_parameters();

% (b) Cell IDs, high level land uses, proportions for splitting land covers
% -------------------------------------------------------------------------
sqlquery = ['SELECT ', ...
                'new2kid, ', ...
                'farm_ha, ', ...
                'water_ha, ', ...
                'sngrass_ha, ', ...
                'wood_ha, ', ...
                'urban_ha, ', ...
                'p_hort, ', ...
                'p_othcrps, ', ...
                'p_othfrm, ', ...
                'p_maize, ', ...
                'p_othcer ', ...
            'FROM nevo.nevo_variables ORDER BY new2kid'];
setdbprefs('DataReturnFormat','table');
dataReturn  = fetch(exec(conn,sqlquery));
cell_info = dataReturn.Data;

% (c) Carbon price (not actually needed!)
% ---------------------------------------
sqlquery    = 'SELECT * FROM nevo.ghg_carbon_prices';
setdbprefs('DataReturnFormat','numeric');
dataReturn  = fetch(exec(conn,sqlquery));
GHG.CarbonPrices = dataReturn.Data;
GHG.startindex = find(GHG.CarbonPrices(:, 1) == parameters.start_year);
GHG.CarbonPrices = GHG.CarbonPrices(GHG.startindex:(GHG.startindex + 300 - 1),:);
carbon_price = GHG.CarbonPrices(1:40, 2);   % 2nd column for social cost of carbon

% (d) Climate scenario
% --------------------
% Use old UKCP09 
clim_string = 'ukcp09';
clim_scen_string = 'a1b';
temp_pct_string = '50';
rain_pct_string = '50';

% (e) Run NEV agriculture model
% -----------------------------
es_agriculture = fcn_run_agriculture(agriculture_data_folder, ...
                                     climate_data_folder,... 
                                     agricultureghg_data_folder, ...
                                     parameters, ...
                                     cell_info, ...
                                     clim_string, ...
                                     clim_scen_string, ...
                                     temp_pct_string, ...
                                     rain_pct_string, ...
                                     carbon_price);

% (f) Take averages in decades 2020-2029, 2030-2039, 2040-2049, 2050-2059
% -----------------------------------------------------------------------
% Take average of only land use variables needed for conversion to SWAT
% land uses
% Do calculations and store in matrix
decade_landuse = [cell_info.new2kid, ...
                  cell_info.water_ha, ...
                  cell_info.urban_ha, ...
                  cell_info.sngrass_ha, ...
                  cell_info.wood_ha, ...
                  mean(es_agriculture.wheat_ha(:, 1:10), 2), ...
                  mean(es_agriculture.wheat_ha(:, 11:20), 2), ...
                  mean(es_agriculture.wheat_ha(:, 21:30), 2), ...
                  mean(es_agriculture.wheat_ha(:, 31:40), 2), ...
                  mean(es_agriculture.osr_ha(:, 1:10), 2), ...
                  mean(es_agriculture.osr_ha(:, 11:20), 2), ...
                  mean(es_agriculture.osr_ha(:, 21:30), 2), ...
                  mean(es_agriculture.osr_ha(:, 31:40), 2), ...
                  mean(es_agriculture.wbar_ha(:, 1:10), 2), ...
                  mean(es_agriculture.wbar_ha(:, 11:20), 2), ...
                  mean(es_agriculture.wbar_ha(:, 21:30), 2), ...
                  mean(es_agriculture.wbar_ha(:, 31:40), 2), ...
                  mean(es_agriculture.sbar_ha(:, 1:10), 2), ...
                  mean(es_agriculture.sbar_ha(:, 11:20), 2), ...
                  mean(es_agriculture.sbar_ha(:, 21:30), 2), ...
                  mean(es_agriculture.sbar_ha(:, 31:40), 2), ...
                  mean(es_agriculture.pot_ha(:, 1:10), 2), ...
                  mean(es_agriculture.pot_ha(:, 11:20), 2), ...
                  mean(es_agriculture.pot_ha(:, 21:30), 2), ...
                  mean(es_agriculture.pot_ha(:, 31:40), 2), ...
                  mean(es_agriculture.sb_ha(:, 1:10), 2), ...
                  mean(es_agriculture.sb_ha(:, 11:20), 2), ...
                  mean(es_agriculture.sb_ha(:, 21:30), 2), ...
                  mean(es_agriculture.sb_ha(:, 31:40), 2), ...
                  mean(es_agriculture.other_ha(:, 1:10), 2), ...
                  mean(es_agriculture.other_ha(:, 11:20), 2), ...
                  mean(es_agriculture.other_ha(:, 21:30), 2), ...
                  mean(es_agriculture.other_ha(:, 31:40), 2), ...
                  mean(es_agriculture.pgrass_ha(:, 1:10), 2), ...
                  mean(es_agriculture.pgrass_ha(:, 11:20), 2), ...
                  mean(es_agriculture.pgrass_ha(:, 21:30), 2), ...
                  mean(es_agriculture.pgrass_ha(:, 31:40), 2), ...
                  mean(es_agriculture.tgrass_ha(:, 1:10), 2), ...
                  mean(es_agriculture.tgrass_ha(:, 11:20), 2), ...
                  mean(es_agriculture.tgrass_ha(:, 21:30), 2), ...
                  mean(es_agriculture.tgrass_ha(:, 31:40), 2), ...
                  mean(es_agriculture.rgraz_ha(:, 1:10), 2), ...
                  mean(es_agriculture.rgraz_ha(:, 11:20), 2), ...
                  mean(es_agriculture.rgraz_ha(:, 21:30), 2), ...
                  mean(es_agriculture.rgraz_ha(:, 31:40), 2)];

% Convert to table with appropriate column names
decade_landuse_table = array2table(decade_landuse, ...
                                   'VariableNames', ...
                                   {'new2kid', ...
                                    'water_ha', ...
                                    'urban_ha', ...
                                    'sngrass_ha', ...
                                    'wood_ha', ...
                                    'wheat_ha_20', 'wheat_ha_30', 'wheat_ha_40', 'wheat_ha_50', ...
                                    'osr_ha_20', 'osr_ha_30', 'osr_ha_40', 'osr_ha_50', ...
                                    'wbar_ha_20', 'wbar_ha_30', 'wbar_ha_40', 'wbar_ha_50', ...
                                    'sbar_ha_20', 'sbar_ha_30', 'sbar_ha_40', 'sbar_ha_50', ...
                                    'pot_ha_20', 'pot_ha_30', 'pot_ha_40', 'pot_ha_50', ...
                                    'sb_ha_20', 'sb_ha_30', 'sb_ha_40', 'sb_ha_50', ...
                                    'other_ha_20', 'other_ha_30', 'other_ha_40', 'other_ha_50', ...
                                    'pgrass_ha_20', 'pgrass_ha_30', 'pgrass_ha_40', 'pgrass_ha_50', ...
                                    'tgrass_ha_20', 'tgrass_ha_30', 'tgrass_ha_40', 'tgrass_ha_50', ...
                                    'rgraz_ha_20', 'rgraz_ha_30', 'rgraz_ha_40', 'rgraz_ha_50'});            

%% (3) Convert to SWAT land covers
%  ===============================
% SWAT categories:
% watr = water_ha
% urmd = urban_ha
% rnge = sngrass_ha
% frst = wood_ha
% past = pgrass_ha + tgrass_ha + rgraz_ha
% agrl = hort_ha + othcrps_ha + othfrm_ha (split from other_ha)
% wwht = wheat_ha
% barl = wbar_ha + sbar_ha
% canp = osr_ha
% pota = pot_ha
% sgbt = sb_ha
% corn = maize_ha (split from other_ha)
% oats = othcer_ha (split from other_ha)

% NB. data must be prepared in this order for model to work!

% Do calculations and store in matrix
swat_decade_landuse = [cell_info.new2kid, ...
                       decade_landuse_table.water_ha, ...
                       decade_landuse_table.urban_ha, ...
                       decade_landuse_table.sngrass_ha, ...
                       decade_landuse_table.wood_ha, ...
                       sum(decade_landuse_table{:, {'pgrass_ha_20', 'tgrass_ha_20', 'rgraz_ha_20'}}, 2), ...
                       sum(cell_info{:, {'p_hort', 'p_othcrps', 'p_othfrm'}}, 2) .* decade_landuse_table.other_ha_20, ...
                       decade_landuse_table.wheat_ha_20, ...
                       sum(decade_landuse_table{:, {'wbar_ha_20', 'sbar_ha_20'}}, 2), ...
                       decade_landuse_table.osr_ha_20, ...
                       decade_landuse_table.pot_ha_20, ...
                       decade_landuse_table.sb_ha_20, ...
                       cell_info.p_maize .* decade_landuse_table.other_ha_20, ...
                       cell_info.p_othcer .* decade_landuse_table.other_ha_20, ...
                       decade_landuse_table.water_ha, ...
                       decade_landuse_table.urban_ha, ...
                       decade_landuse_table.sngrass_ha, ...
                       decade_landuse_table.wood_ha, ...
                       sum(decade_landuse_table{:, {'pgrass_ha_30', 'tgrass_ha_30', 'rgraz_ha_30'}}, 2), ...
                       sum(cell_info{:, {'p_hort', 'p_othcrps', 'p_othfrm'}}, 2) .* decade_landuse_table.other_ha_30, ...
                       decade_landuse_table.wheat_ha_30, ...
                       sum(decade_landuse_table{:, {'wbar_ha_30', 'sbar_ha_30'}}, 2), ...
                       decade_landuse_table.osr_ha_30, ...
                       decade_landuse_table.pot_ha_30, ...
                       decade_landuse_table.sb_ha_30, ...
                       cell_info.p_maize .* decade_landuse_table.other_ha_30, ...
                       cell_info.p_othcer .* decade_landuse_table.other_ha_30, ...
                       decade_landuse_table.water_ha, ...
                       decade_landuse_table.urban_ha, ...
                       decade_landuse_table.sngrass_ha, ...
                       decade_landuse_table.wood_ha, ...
                       sum(decade_landuse_table{:, {'pgrass_ha_40', 'tgrass_ha_40', 'rgraz_ha_40'}}, 2), ...
                       sum(cell_info{:, {'p_hort', 'p_othcrps', 'p_othfrm'}}, 2) .* decade_landuse_table.other_ha_40, ...
                       decade_landuse_table.wheat_ha_40, ...
                       sum(decade_landuse_table{:, {'wbar_ha_40', 'sbar_ha_40'}}, 2), ...
                       decade_landuse_table.osr_ha_40, ...
                       decade_landuse_table.pot_ha_40, ...
                       decade_landuse_table.sb_ha_40, ...
                       cell_info.p_maize .* decade_landuse_table.other_ha_40, ...
                       cell_info.p_othcer .* decade_landuse_table.other_ha_40, ...
                       decade_landuse_table.water_ha, ...
                       decade_landuse_table.urban_ha, ...
                       decade_landuse_table.sngrass_ha, ...
                       decade_landuse_table.wood_ha, ...
                       sum(decade_landuse_table{:, {'pgrass_ha_50', 'tgrass_ha_50', 'rgraz_ha_50'}}, 2), ...
                       sum(cell_info{:, {'p_hort', 'p_othcrps', 'p_othfrm'}}, 2) .* decade_landuse_table.other_ha_50, ...
                       decade_landuse_table.wheat_ha_50, ...
                       sum(decade_landuse_table{:, {'wbar_ha_50', 'sbar_ha_50'}}, 2), ...
                       decade_landuse_table.osr_ha_50, ...
                       decade_landuse_table.pot_ha_50, ...
                       decade_landuse_table.sb_ha_50, ...
                       cell_info.p_maize .* decade_landuse_table.other_ha_50, ...
                       cell_info.p_othcer .* decade_landuse_table.other_ha_50];
                   
% Convert to table with appropriate column names
swat_landuse_names = {'watr_20', 'urmd_20', 'rnge_20', 'frst_20', 'past_20', 'agrl_20', 'wwht_20', 'barl_20', 'canp_20', 'pota_20', 'sgbt_20', 'corn_20', 'oats_20', ...
                      'watr_30', 'urmd_30', 'rnge_30', 'frst_30', 'past_30', 'agrl_30', 'wwht_30', 'barl_30', 'canp_30', 'pota_30', 'sgbt_30', 'corn_30', 'oats_30', ...
                      'watr_40', 'urmd_40', 'rnge_40', 'frst_40', 'past_40', 'agrl_40', 'wwht_40', 'barl_40', 'canp_40', 'pota_40', 'sgbt_40', 'corn_40', 'oats_40', ...
                      'watr_50', 'urmd_50', 'rnge_50', 'frst_50', 'past_50', 'agrl_50', 'wwht_50', 'barl_50', 'canp_50', 'pota_50', 'sgbt_50', 'corn_50', 'oats_50'};

swat_decade_landuse_table = array2table(swat_decade_landuse, ...
                                        'VariableNames', ...
                                        ['new2kid', ...
                                         swat_landuse_names]);
                                     
%% (4) Aggregate land cover from 2km grid to subcatchments
%  =======================================================
% (a) Calculate land cover for cells intersecting with subcatchments
% ------------------------------------------------------------------
% Join landuse table to key_grid_subctch
base_lcs_subctch_cells = join(key_grid_subctch, swat_decade_landuse_table);

% Multiply land uses by proportion of cell in subcatchment
base_lcs_subctch_cells{:, swat_landuse_names} = base_lcs_subctch_cells.proportion .* base_lcs_subctch_cells{:, swat_landuse_names};

% (b) Aggregate land cover to subcatchments
% -----------------------------------------
% Use grpstats to aggregate cells to subcatchments
base_lcs_subctch = grpstats(base_lcs_subctch_cells(:, 2:end), ...
                            'subctch_id', ...
                            'sum', ...
                            'DataVars', swat_landuse_names, ...
                            'VarNames', ['subctch_id', 'GroupCount', swat_landuse_names]);
                        
% Remove 'GroupCount' column                        
base_lcs_subctch = base_lcs_subctch(:, ['subctch_id', swat_landuse_names]);

% Sort in subctchment order from subctch_info
base_lcs_subctch = outerjoin(subctch_info, base_lcs_subctch, 'MergeKeys', true);
[ind, idx] = ismember(subctch_info.subctch_id, base_lcs_subctch.subctch_id);
base_lcs_subctch = base_lcs_subctch(idx, :);

% Subcatchment area is not equal to sum of land use hectares, because some
% subcatchments do not have full coverage of 2km grid cells. Calculate a
% 'subcatchment cell area' which is the area of the subcatchment covered by
% 2km grid cells. This will be used to convert land use hectares to land
% use proportions, needed for the transfer model.
base_lcs_subctch.cell_area_ha = sum(base_lcs_subctch{:, 3:15}, 2);   % sum 2020s land uses (decade makes no difference)

%% (5) Save to .mat file
%  =====================
% base_lcs_subctch_cells
save([path_to_save, 'base_lcs_subctch_cells.mat'], 'base_lcs_subctch_cells')

% base_lcs_subctch
save([path_to_save, 'base_lcs_subctch.mat'], 'base_lcs_subctch')

