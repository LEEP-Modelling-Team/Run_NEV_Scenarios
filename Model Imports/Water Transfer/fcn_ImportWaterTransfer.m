function [base_lcs_subctch, ...
          base_lcs_subctch_cells, ...
          no_land_subctch, ...
          basin_ids, subctch_basins, ...
          proportions, ...
          models_lu] = fcn_ImportWaterTransfer(uk_lcm, es_agriculture_uk, parameters, model_flags, conn)
      
    
    %% (1) Load, prepare and save data
    %  ===============================

    % Set file name for storing data
    NEVO_Water_Transfer_data_mat = strcat(parameters.water_transfer_data_folder, 'NEVO_Water_Transfer_data.mat');

    % (a) base_lcs_subctch and ase_lcs_subctch_cells
    % ----------------------------------------------
    [base_lcs_subctch, base_lcs_subctch_cells] = fcn_subctch_landuse(uk_lcm, ...
                                                                     es_agriculture_uk, ...
                                                                     parameters, ...
                                                                     model_flags, ...
                                                                     conn);
    % (b) Subcatchment / basin crossover
    % ----------------------------------
    % Load river_catchment_io table (altered from Brett's)
    % Created in subctch_io.m
    load([parameters.water_transfer_data_folder,'Input Output/river_catchments_io.mat'], 'river_catchments_io');
    subctch_basins = river_catchments_io(:, {'basin', 'outflow_ctch'});
    subctch_basins.Properties.VariableNames = {'basin_id', 'subctch_id'};

    % (c) Subcatchments which do not crossover with 2km grid
    % ------------------------------------------------------
    ind_land_subctch = ismember(base_lcs_subctch.subctch_id, unique(base_lcs_subctch_cells.subctch_id));
    no_land_subctch = base_lcs_subctch.subctch_id(~ind_land_subctch);

    % (d) Basin IDs
    % -------------
    % Only consider basins with IO entries
    basin_ids = unique(river_catchments_io.basin);
    num_basins = length(basin_ids);
    % NB. these are updated in step (f)

    % (e) Proportions for converting from NEV land uses to SWAT land uses
    % -------------------------------------------------------------------
    sqlquery = ['SELECT ' ...
                'new2kid, ' ...
                'p_hort, ' ...
                'p_othcrps, ' ...
                'p_othfrm, ' ...
                'p_maize, ' ...
                'p_othcer ' ...
                'FROM nevo.nevo_variables ' ...
                'ORDER BY new2kid;'];
    setdbprefs('DataReturnFormat', 'table')
    dataReturn = fetch(exec(conn, sqlquery));
    proportions = dataReturn.Data;

    % (f) Land use models
    % -------------------
    % These have been fitted and processed in R
    % Created in flow/wq_data_analysis_landuse_final.R (see water-emulation GitHub repository)
    % GAMs with thin plate splines smooth terms
    flow_lu = load([parameters.water_transfer_data_folder, 'flow_lu_mod.mat']);
    orgn_lu = load([parameters.water_transfer_data_folder,'orgn_lu_mod.mat']);
    orgp_lu = load([parameters.water_transfer_data_folder, 'orgp_lu_mod.mat']);
    no3_lu = load([parameters.water_transfer_data_folder, 'no3_lu_mod.mat']);
    minp_lu = load([parameters.water_transfer_data_folder, 'minp_lu_mod.mat']);
    disox_lu = load([parameters.water_transfer_data_folder,'disox_lu_mod.mat']);
    models_lu = struct('flow', flow_lu, ...
                       'orgn', orgn_lu, ...
                       'orgp', orgp_lu, ...
                       'no3', no3_lu, ...
                       'minp', minp_lu, ...
                       'disox', disox_lu);

    NEVO_Water_Transfer_data_mat = strcat(parameters.water_transfer_data_folder, 'NEVO_Water_Transfer_data.mat');
    save(NEVO_Water_Transfer_data_mat, 'base_lcs_subctch', ...
                            'base_lcs_subctch_cells', ...
                            'no_land_subctch', ...
                            'basin_ids', ...
                            'subctch_basins', ...
                            'proportions', ...
                            'models_lu', ...
                            '-mat', '-v6')

    tic
end