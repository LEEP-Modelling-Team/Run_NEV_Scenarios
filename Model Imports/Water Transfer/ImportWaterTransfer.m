% ImportWaterTransfer
% ===================
% Authors: Nathan Owen
% Last modified: 25/02/2020
% Import all data required for running the NEV water transfer model. To be 
% loaded from within fcn_run_water_transfer.m
% --------------------------------------------
% NOTE: emulator of SWAT models transferred on WFD sub-basins

%% (1) Set up
%  ==========
clear

% (a) Flags
% ---------
database_calls_flag = true;      % Load, prepare and save data
base_run_flag = true;            % Run model under baseline land use to save flow (ONLY NEEDED ONCE!)
test_function_flag = false;      % Test model

% (b) Database connection
% -----------------------
server_flag = false;
conn = fcn_connect_database(server_flag);

% (c) Set paths for storing imported data
% ---------------------------------------
SetDataPaths;

%% (1) Load, prepare and save data
%  ===============================
if database_calls_flag
    tic
    
    % Set file name for storing data
    NEVO_Water_Transfer_data_mat        = strcat(water_transfer_data_folder, 'NEVO_Water_Transfer_data.mat');
    
    % (a) base_lcs_subctch
    % --------------------
    % Created in subctch_landuse.m
    SetDataPaths;
    load([water_transfer_data_folder,'Land Use/base_lcs_subctch.mat'], 'base_lcs_subctch');
    
    % (b) base_lcs_subctch_cells
    % --------------------------
    % Created in subctch_landuse.m
    load([water_transfer_data_folder,'Land Use/base_lcs_subctch_cells.mat'], 'base_lcs_subctch_cells');
    
    % (c) Subcatchment / basin crossover
    % ----------------------------------
    % Load river_catchment_io table (altered from Brett's)
    % Created in subctch_io.m
    load([water_transfer_data_folder,'Input Output/river_catchments_io.mat'], 'river_catchments_io');
    subctch_basins = river_catchments_io(:, {'basin', 'outflow_ctch'});
    subctch_basins.Properties.VariableNames = {'basin_id', 'subctch_id'};
    
    % (d) Subcatchments which do not crossover with 2km grid
    % ------------------------------------------------------
    ind_land_subctch = ismember(base_lcs_subctch.subctch_id, unique(base_lcs_subctch_cells.subctch_id));
    no_land_subctch = base_lcs_subctch.subctch_id(~ind_land_subctch);
    
    % (e) Basin IDs
    % -------------
    % Only consider basins with IO entries
    basin_ids = unique(river_catchments_io.basin);
    num_basins = length(basin_ids);
    % NB. these are updated in step (f)
    
    % (g) Proportions for converting from NEV land uses to SWAT land uses
    % -------------------------------------------------------------------
    sqlquery = ['SELECT ' ...
                'new2kid, ' ...
                'p_hort, ' ...
                'p_othcrps, ' ...
                'p_othfrm, ' ...
                'p_maize, ' ...
                'p_othcer ' ...
                'FROM nevo.nevo_variables ' ...
                'ORDER BY new2kid;'];
    setdbprefs('DataReturnFormat', 'table')
    dataReturn = fetch(exec(conn, sqlquery));
    proportions = dataReturn.Data;
    
    % (h) Land use models
    % -------------------
    % These have been fitted and processed in R
    % Created in flow/wq_data_analysis_landuse_final.R (see water-emulation GitHub repository)
    % GAMs with thin plate splines smooth terms
    SetDataPaths;
    flow_lu = load([water_transfer_data_folder, 'flow_lu_mod.mat']);
    orgn_lu = load([water_transfer_data_folder,'orgn_lu_mod.mat']);
    orgp_lu = load([water_transfer_data_folder, 'orgp_lu_mod.mat']);
    no3_lu = load([water_transfer_data_folder, 'no3_lu_mod.mat']);
    minp_lu = load([water_transfer_data_folder, 'minp_lu_mod.mat']);
    disox_lu = load([water_transfer_data_folder,'disox_lu_mod.mat']);
    models_lu = struct('flow', flow_lu, ...
                       'orgn', orgn_lu, ...
                       'orgp', orgp_lu, ...
                       'no3', no3_lu, ...
                       'minp', minp_lu, ...
                       'disox', disox_lu);
    
    % Save data to .mat file
    save(NEVO_Water_Transfer_data_mat, 'base_lcs_subctch', ...
                                       'base_lcs_subctch_cells', ...
                                       'no_land_subctch', ...
                                       'basin_ids', ...
                                       'subctch_basins', ...
                                       'proportions', ...
                                       'models_lu', ...
                                       '-mat', '-v6')
    
    toc
end

%% (2) Base run
%  ============
if base_run_flag
    % Here we run the water transfer model for all subcatchments/basins
    % under baseline land uses as predicted by NEV agriculture model
    % The flow in each decade for each basin is saved in 
    % /Model Data/Base Run
    % This then allows us to run the function for each subcatchment, as
    % upstream flow can be loaded from the base run
    
    % (a) Run NEV agriculture model
    % -----------------------------
    % Set path to agriculture model data
    SetDataPaths;
    
    % Set up model parameters in structure
    parameters = fcn_set_parameters();

    % Set up land uses in table
    sqlquery = ['SELECT ', ...
                    'new2kid, ', ...
                    'farm_ha, ', ...
                    'wood_ha, ', ...
                    'wood_mgmt_ha, ', ...
                    'sngrass_ha, ', ...
                    'urban_ha, ', ...
                    'water_ha ', ...
                'FROM nevo.nevo_variables ORDER BY new2kid'];
    setdbprefs('DataReturnFormat','table');
    dataReturn  = fetch(exec(conn,sqlquery));
    high_level_lcs = dataReturn.Data;
    
    % Run function
    parameters = fcn_set_parameters();
    parameters.run_ghg = false;
    es_agriculture = fcn_run_agriculture(agriculture_data_folder, ...
                                         climate_data_folder,...
                                         agricultureghg_data_folder, ...
                                         parameters, ...
                                         high_level_lcs);
    
    % Take decadal averages                                 
    landuses = fcn_collect_output_simple(high_level_lcs, es_agriculture);
    
    % (b) Select subcatchments to run base flow for
    % ---------------------------------------------
    % Default is all subcatchments
    load([water_transfer_data_folder,'NEVO_Water_Transfer_data.mat'], 'base_lcs_subctch');
    subctch_ids = base_lcs_subctch.subctch_id;
%     subctch_ids = subctch_ids(1:10);
%     subctch_ids = {'323_0'; '1_0'; '2082_0'; '8314_0'; '8185_0'};
    
%     % To run a specific basin:
%     sqlquery = ['SELECT DISTINCT(outflow_ctch) AS subctch_id ', ...
%                 'FROM water.river_catchments_io ', ...
%                 'WHERE basin = 3036',  ...
%                 ' UNION ', ...
%                 'SELECT DISTINCT(inflow_ctch) AS subctch_id ', ...
%                 'FROM water.river_catchments_io ', ...
%                 'WHERE basin = 3036', ...
%                 ' ORDER BY subctch_id'];
%     setdbprefs('DataReturnFormat', 'cellarray')
%     dataReturn = fetch(exec(conn, sqlquery));
%     subctch_ids = dataReturn.Data;
%     subctch_ids = subctch_ids(~strcmp('0', subctch_ids));

    % (c) Run water model for these subcatchments
    % -------------------------------------------
    % NB. base_run must be set to 1! This saves base runs in /Model Data
    tic
        [es_water_transfer, flow_transfer] = fcn_run_water_transfer(water_transfer_data_folder, ...
                                                                    landuses, ...
                                                                    subctch_ids, ...
                                                                    1, ...
                                                                    'baseline');
    toc
end

%% (3) Test function
%  =================
if test_function_flag
    % EXAMPLE: CHANGE ONE 2KM CELL, GET OUTPUT AT ONE OR MORE SUBCATCHMENTS
    % =====================================================================
    % (a) Identify cell(s) and overlapping/downstream subcatchment(s)
    % ---------------------------------------------------------------
    % NB input_subctch must be in column vector
    cell_id = 103620;
    input_subctch = {'3594_0'};

%     cell_id = 103620;
%     input_subctch = {'3594_0'; '3594_1'};

%     cell_id = 132206;
%     input_subctch = {'1128_0'; '676_0'; '676_1'; '1005_0'; '1005_3'; '1005_2'; '1005_1'};

%     cell_id = [57880; ...
%                 (58527:58530)'; ...
%                 (59176:59181)'; ...
%                 (59826:59831)'; ...
%                 (60476:60480)'; ...
%                 (61128:61130)'; ...
%                 (61778:61780)'; ...
%                 (62428:62429)'];
%     input_subctch = {'4050_0'; ...
%                       '4069_0'; ...
%                       '4068_0'; ...
%                       '60_0'};

    % (b) Get cell landuses from database
    % -----------------------------------
    if length(cell_id) > 1
        sqlquery = ['SELECT ', ...
                    'new2kid, ', ...
                    'water_ha, ', ...
                    'urban_ha, ', ...
                    'sngrass_ha, ', ...
                    'wood_ha, ', ...
                    'pgrass_ha_20, pgrass_ha_30, pgrass_ha_40, pgrass_ha_50, ', ...
                    'tgrass_ha_20, tgrass_ha_30, tgrass_ha_40, tgrass_ha_50, ', ...
                    'rgraz_ha_20, rgraz_ha_30, rgraz_ha_40, rgraz_ha_50, ', ...
                    'wheat_ha_20, wheat_ha_30, wheat_ha_40, wheat_ha_50, ', ...
                    'wbar_ha_20, wbar_ha_30, wbar_ha_40, wbar_ha_50, ', ...
                    'sbar_ha_20, sbar_ha_30, sbar_ha_40, sbar_ha_50, ', ...
                    'osr_ha_20, osr_ha_30, osr_ha_40, osr_ha_50, ', ...
                    'pot_ha_20, pot_ha_30, pot_ha_40, pot_ha_50, ', ...
                    'sb_ha_20, sb_ha_30, sb_ha_40, sb_ha_50, ', ...
                    'other_ha_20, other_ha_30, other_ha_40, other_ha_50 ', ...
                'FROM nevo_explore.explore_2km ', ...
                'WHERE new2kid IN (', strrep(strrep(jsonencode(cell_id), '[', ''), ']', ''), ')'];
    else
        sqlquery = ['SELECT ', ...
                    'new2kid, ', ...
                    'water_ha, ', ...
                    'urban_ha, ', ...
                    'sngrass_ha, ', ...
                    'wood_ha, ', ...
                    'pgrass_ha_20, pgrass_ha_30, pgrass_ha_40, pgrass_ha_50, ', ...
                    'tgrass_ha_20, tgrass_ha_30, tgrass_ha_40, tgrass_ha_50, ', ...
                    'rgraz_ha_20, rgraz_ha_30, rgraz_ha_40, rgraz_ha_50, ', ...
                    'wheat_ha_20, wheat_ha_30, wheat_ha_40, wheat_ha_50, ', ...
                    'wbar_ha_20, wbar_ha_30, wbar_ha_40, wbar_ha_50, ', ...
                    'sbar_ha_20, sbar_ha_30, sbar_ha_40, sbar_ha_50, ', ...
                    'osr_ha_20, osr_ha_30, osr_ha_40, osr_ha_50, ', ...
                    'pot_ha_20, pot_ha_30, pot_ha_40, pot_ha_50, ', ...
                    'sb_ha_20, sb_ha_30, sb_ha_40, sb_ha_50, ', ...
                    'other_ha_20, other_ha_30, other_ha_40, other_ha_50 ', ...
                'FROM nevo_explore.explore_2km ', ...
                'WHERE new2kid IN (', num2str(cell_id), ')'];
    end
    setdbprefs('DataReturnFormat', 'table')
    dataReturn = fetch(exec(conn, sqlquery));
    landuses_base = dataReturn.Data;

    % (c) Create scenario with landuses change
    % ----------------------------------------
    % E.g. add 50 hectares to woodland from wheat
    landuses_scen = landuses_base;
    landuses_scen.wood_ha = landuses_scen.wood_ha + 50;
    landuses_scen.pgrass_ha_20 = landuses_scen.pgrass_ha_20 - 50;
    landuses_scen.pgrass_ha_30 = landuses_scen.pgrass_ha_30 - 50;
    landuses_scen.pgrass_ha_40 = landuses_scen.pgrass_ha_40 - 50;
    landuses_scen.pgrass_ha_50 = landuses_scen.pgrass_ha_50 - 50;
    % !!! this land use change may not actually 'work' !!!

    % (d) Run water model
    % -------------------
    other_ha_string = 'baseline';
    % Baseline
    [es_water_transfer_base, ...
        flow_base] = fcn_run_water_transfer(water_transfer_data_folder, ...
                                            landuses_base, ...
                                            input_subctch, ...
                                            0, ...
                                            other_ha_string);
    % Scenario
    [es_water_transfer_scen, ...
        flow_scen] = fcn_run_water_transfer(water_transfer_data_folder, ...
                                            landuses_scen, ...
                                            input_subctch, ...
                                            0, ...
                                            other_ha_string);
    % Scenario: apply landcover changes only in first subcatchment of input_subctch
    [es_water_transfer_scen_lc, ...
        flow_scen_lc] = fcn_run_water_transfer(water_transfer_data_folder, ...
                                               landuses_scen, ...
                                               input_subctch, ...
                                               0, ...
                                               other_ha_string, ...
                                               input_subctch(1));

    % (e) Compare outputs in a table
    % ------------------------------
    es_water_transfer = [es_water_transfer_base; ...
                         es_water_transfer_scen; ...
                         es_water_transfer_scen_lc];
end
