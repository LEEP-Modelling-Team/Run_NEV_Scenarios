clear
conn = fcn_connect_database(false);

SetDataPaths;

load([biodiversity_data_folder,'\NEVO_Biodiversity_UCL_data.mat'])

sqlquery = ['SELECT ', ...
                'new2kid, ', ...
                'coast_07, ', ...
                'fwater_07, ', ...
                'marine_07, ', ...
                'urban_07, ', ...
                'permg_10, ', ...
                'tempg_10, ', ...
                'rgraz_10, ', ...
                'grsnfrm_10, ', ...
                'fwood_10, ', ...
                'nfwood_10, ', ...
                'wheat_10, ', ...
                'wbarley_10, ', ...
                'sbarley_10, ', ...
                'othcer_10, ', ...
                'pots_10, ', ...
                'wosr_10, ', ...
                'sosr_10, ', ...
                'maize_10, ', ...
                'hort_10, ', ...
                'tbarley_10, ', ...
                'tosr_10, ', ...
                'othfrm_10, ', ...
                'sugarbeet_10, ', ...
                'othcrps_10, ', ...
                'ocean ', ...
            'FROM seer.seer_landuse ', ...
            'ORDER BY new2kid'];
setdbprefs('DataReturnFormat', 'table');
dataReturn = fetch(exec(conn, sqlquery));
landuses = dataReturn.Data;

% Check data means
isequal(mean(landuses{:, 2:end}, 1), Biodiversity.PCA.means)
isequal(round(mean(landuses{:, 2:end}, 1), 10), round(Biodiversity.PCA.means, 10)) % equal to 10 dp

% Center data
model_matrix_pct = landuses{:, 2:end};
model_matrix_pct = round(landuses{:, 2:end}, 10);
model_matrix_centred = model_matrix_pct - Biodiversity.PCA.means;

% % Check centred data means are zero
isequal(mean(model_matrix_centred, 1), zeros(1, 25))
isequal(round(mean(model_matrix_centred, 1), 10), round(zeros(1, 25), 10))  % equal to 10 dp

% Project data: use first 7 principal components
model_matrix_pca = model_matrix_centred * Biodiversity.PCA.eigenvectors(:, 1:7);

% add intercept
model_matrix = [ones(57230, 1), model_matrix_pca];

% Calculate logit of probability of occurrence
pollinator_prob_logit = model_matrix * Biodiversity.Coefficients_Pollinators';
priority_prob_logit = model_matrix * Biodiversity.Coefficients_PrioritySpecies';

% Convert to presence using threshold
pollinator_presence = double(pollinator_prob_logit > Biodiversity.Thresholds_Pollinators');
priority_presence = double(priority_prob_logit > Biodiversity.Thresholds_PrioritySpecies');

% read Henry's species presence data under current climate
[Data, DataText, ~] = xlsread([biodiversity_data_folder,'\New (PCA)\all_predictions_unmasked_current.csv']);
Data = Data(:, 2:end);
DataText = DataText(2:end);

ind_pollinators = ismember(DataText, Biodiversity.Names_Pollinators);
ind_priority = ismember(DataText, Biodiversity.Names_PrioritySpecies);

isequal(Data(:, ind_pollinators), pollinator_presence)
isequal(Data(:, ind_priority), priority_presence)

% all equal!

